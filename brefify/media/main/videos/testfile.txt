 Hello guys, welcome back. My name is Andre. They'll show you how to implement responsive UI in Streamlit application. Well, Streamlit's out of the box UI, it renders very well in responsive way out of the box. So if you create, for example, Streamlit grid or maybe other Streamlit UI components, if you resize the screen to a smaller one, then those out of the box components, they are resizing properly without any issues. But what I'll be talking today about your own components that you add to the screen, and when you need to know the screen width and you need to decide in advance how many columns in the form you want to render, or if you want to render maybe multiple elements on the same line and so on. And specifically, I'll be talking about dynamically generated form. And based on vertical space, which is available, I want to calculate how many columns should be rendered, like four columns, three, two, or maybe one, if we're displaying our application on a mobile device. So let's jump to the application. And now, according to the average width display, and we've got three columns. And now let's play a bit with this application. And if you go to the responsive design mode, we pick this one, and if I refresh the screen. So the application loads, and now the form should be, I think, four columns, yeah. So that four columns on this, on this kind of each end. Yeah, if I switch to another one to the narrow UI slightly more narrow, then the overall skin was precise, but the streamlit UI was not refreshed. And this is the reason for that is because streamlit is a serocyte framework, and I'm using a streaming JavaScript component to get a UI read on the client side. And only next time when we do refresh, then this information will be sent to the backend and then the skin will be adjusted accordingly. But I don't think this is the big issue in practice, because usually if user wants to resize his browser, then he'll need to hit refresh. And then proper UI will be rendered after the refresh. Like now we've got three columns on this on this suite. And if user opens application on mobile or then on on on on iPod, for example, then they would not resize the skin anyway, and there'll be no need to refresh when screen size changes. And in most of the cases in practice, even on the browser, on on on a desktop browser, user would load it once and it will stay over user can can refresh. That's fine. So now if we make it even more narrow and hit refresh, then now I guess should be the form should get two columns yet now got two columns. And here we can even select one of the elements and then we get this element. Editable for example, but this is not point of this post labeling of the documents. Now if I select like iPod maybe and hit refresh now, then on this screen, I guess we got also three columns. And if it's iPod Pro, a bit more vertical space, sorry horizontal space, not vertical. Then it's still two and on this one, let's see, probably I guess should be three columns. Yeah, this one, this one, this one horizontal space, we got three columns. And then if I check on the phone and reloaded to be rendered properly here, then we got the image and this one column rendered one single column because it's not narrow, narrow screen. Okay, and now if we exit from responsive design mode and reload, we get UI that with three columns that fits well with current skin width with the available horizontal space. Yeah, and if you look into the actual application, so the first thing in a function where streamlinked script is executing, we are using third party streamed library called stream the JavaScript. I was talking about the library in my previous video and I'm executing window dot inner width. This means on the JavaScript site where I'm getting actual horizontal space available. In the current browser window, we are streamed application runs and returning this VIF to the variable. And yeah, whenever browser is if user will go and decides browser manually, as we saw it during my demo, then because stringent is a server side framework. So this call will not be executed until the next request is sent from the browser to the client. Yeah, so this is the reason why you would need to reload application manually if you resize the screen manually as well. So got UI width and then over here, the dynamic form is being generated by checking current UI width. So let's say if it's very wide, then render four columns and otherwise it's a three, two or one. And there are different functions used to render this dynamic form on different side of horizontal space. So if it take a quick look into the functions, then we'll see render form wide creates four streamed columns and we are feeling the first column, then second, third and fourth. And if it's average size, you know, I then we are using three columns. If it's narrow to and if you are on the mobile, when horizontal space is limited, so basically one column. And by the way, this, this application is using nested columns out of the box. This functionality is not available in stream, you can render only one layer of columns and you cannot have another set of columns inside the first layer. But you can work around this by installing another third party stringent component, which is called stream it nested layout. Yeah, okay. And then it works well. And I think it's very practical and useful approach because it helps to leverage properly all the horizontal space that you got in your application. And this is especially useful for dynamic forms that I was talking and the showing in this application because otherwise, if you don't know available UI width, then you would not be able to decide how many columns you would render. Probably single column and this would be a waste of UI space and user will need to scroll a lot from from top to bottom to find all the form elements. In this case, you feed more for elements on the same line and this means that there will be less scrolling for the user. It will be easier to use the application. So thanks for watching. Can see you next time. Bye.